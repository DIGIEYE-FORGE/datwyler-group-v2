name: Datwyler Dev deploy

on:
  workflow_dispatch:
  push:
    branches: [deploy-dev]

env:
  APP_NAME: datwyler-v2-dev
  NAMESPACE: endpoint-dev
  DOMAIN_NAME: demo.digi-forge.digieye.io
  ENABLED_INGRESS: true
  ENABLED_CERTIF: true
  BACK_API: https://dev.api.digieye.io
  AUTH_API: https://dev.api.auth.digieye.io

jobs:
  build:
    name: build and push image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set build tag
        shell: bash
        run: |
          echo "BUILD_TAG=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate Dockerfile
        run: |
            cat <<'END_HELP' > Dockerfile 
            FROM node:18-alpine
            WORKDIR /app
            COPY package*.json .
            RUN npm install --force
            RUN npm install serve -g
            COPY . .
            ENV VITE_BACK_API=${{ env.BACK_API }}
            ENV VITE_AUTH_API=${{ env.AUTH_API }}
            RUN yarn build
            EXPOSE 80
            CMD ["serve", "-s", "dist" , "-l", "tcp://0.0.0.0:80"]
            END_HELP
      - name: Build and push image to DockerHub
        uses: docker/build-push-action@v2
        with:
          push: true
          context: .
          tags: digieye/${{ env.APP_NAME}}:${{ env.BUILD_TAG }}
          #build-ars: | 
          #   AUTH_API=${{ env.AUTH_API }}
          #   BACK_API=${{ env.BACK_API }}

  deploy:
    needs: build
    name: deploy image to k8s
    runs-on: ubuntu-latest
    env:
      GCLOUD_SERVICE_ACCOUNT_KEY: ${{ secrets.GCLOUD_SERVICE_ACCOUNT_KEY }}
      GCS_BUCKET_NAME: ${{ secrets.GCS_BUCKET_NAME }}
      CHART_NAME: digieye-wkr

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set build tag
        shell: bash
        run: |
          echo "BUILD_TAG=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Setup kubectl
        uses: ThomasKliszowski/setup-kubectl@v1
        with:
          kube-config: ${{ secrets.KUBE_CONFIG_DATA }}

      - name: Install helm
        run: |
          curl -LO https://get.helm.sh/helm-v3.8.0-linux-amd64.tar.gz
          tar -zxvf helm-v3.8.0-linux-amd64.tar.gz
          mv linux-amd64/helm /usr/local/bin/helm
          helm version
          
      - name: Add credentials
        env:
          GCLOUD_SERVICE_ACCOUNT_KEY: ${{ secrets.GCLOUD_SERVICE_ACCOUNT_KEY }}
        run: |
          echo "${GCLOUD_SERVICE_ACCOUNT_KEY}" > service-account.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=service-account.json" >> $GITHUB_ENV
      - name: Helm config
        env:
          GCS_BUCKET_NAME: ${{ secrets.GCS_BUCKET_NAME }}
          HELM_GCS_VERSION: 0.3.1
        run: |
          helm plugin install https://github.com/hayorov/helm-gcs --version ${HELM_GCS_VERSION}
          helm repo add digieye ${{ env.GCS_BUCKET_NAME }}
      - name: Debug
        run: |
          helm upgrade --install --dry-run --debug --atomic --timeout 1m ${{ env.APP_NAME }} \
            digieye/${{ env.CHART_NAME }}  --namespace ${{ env.NAMESPACE }} \
            --set ingress.enabled=${{ env.ENABLED_INGRESS }} --set ingress.host=${{ env.DOMAIN_NAME }} \
            --set certificate.enabled=${{ env.ENABLED_CERTIF }} --set image.tag=${{ env.BUILD_TAG }} \
             --set image.repository=digieye/${{ env.APP_NAME}}

      - name: Deploy
        run: |
          helm upgrade --install --atomic --timeout 3m ${{ env.APP_NAME }} digieye/${{ env.CHART_NAME }}  \
          --namespace ${{ env.NAMESPACE }} \
          --set ingress.enabled=${{ env.ENABLED_INGRESS }} --set ingress.host=${{ env.DOMAIN_NAME }} \
          --set certificate.enabled=${{ env.ENABLED_CERTIF }} --set image.tag=${{ env.BUILD_TAG }} \
          --set image.repository=digieye/${{ env.APP_NAME}}
