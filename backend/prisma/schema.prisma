generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model VirtualDevice {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(50)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  devices   Device[]
  tenantId  Int?     @map("tenant_id")

  @@index([tenantId], name: "virtual_devices_tenant_id_index")
  @@map("virtual_devices")
}

model Group {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(50)
  type       String?  @db.VarChar(50)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  parentId   Int?     @map("parent_id")
  parent     Group?   @relation("group_tree", fields: [parentId], references: [id])
  subgroups  Group[]  @relation("group_tree")
  location   String?  @db.VarChar(50)
  lat        Float?
  lng        Float?
  ip         String?  @db.VarChar(50)
  attributes Json?
  devices    Device[]
  tenantId   Int?     @map("tenant_id")

  @@unique([name, tenantId, parentId])
  @@index([tenantId], name: "groups_tenant_id_index")
  @@map("groups")
}

model Alert {
  id       Int     @id @default(autoincrement())
  deviceId Int
  device   Device  @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  type     String?
  message  String?
  level    String?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  attributes     Json     @default("{}") @map("attributes") @db.Json
  acknowledgedBy Int?     @map("acknowledged_by")

  @@map("alert")
}

model Decoder {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(50)
  description   String          @db.VarChar(50)
  fnc           String
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @default(now()) @updatedAt @map("updated_at")
  deviceProfile DeviceProfile[]
  tenantId      Int?            @map("tenant_id")

  @@unique([name, tenantId])
  @@map("decoders")
}

model DeviceType {
  id             Int             @id @default(autoincrement())
  name           String          @db.VarChar(50)
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  deviceProfiles DeviceProfile[]

  tenantId Int? @map("tenant_id")

  @@unique([name, tenantId])
  @@map("device_types")
}

model Firmware {
  id          Int     @id @default(autoincrement())
  name        String? @db.VarChar(100)
  version     String? @db.VarChar(100)
  description String? @db.VarChar(255)
  url         String? @unique
  size        Int?

  hash      String?  @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  device    Device[]

  tenantId Int? @map("tenant_id")

  @@unique([name, version, tenantId])
  @@map("firmwares")
}

model Protocol {
  id             Int             @id @default(autoincrement())
  name           String          @db.VarChar(50)
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  deviceProfiles DeviceProfile[]

  tenantId Int? @map("tenant_id")

  @@unique([name, tenantId])
  @@map("protocols")
}

model DeviceProfile {
  id              Int             @id @default(autoincrement())
  name            String          @db.VarChar(50)
  description     String?         @db.VarChar(255)
  logo            String?         @db.VarChar(255)
  cridentialsType TypeCredential? @map("cridentials_type")
  deviceType      DeviceType?     @relation(fields: [deviceTypeId], references: [id])
  deviceTypeId    Int?            @map("device_type_id")
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  devices         Device[]
  protocol        Protocol?       @relation(fields: [protocolId], references: [id])
  protocolId      Int?
  decoder         Decoder?        @relation(fields: [decoderId], references: [id])
  decoderId       Int?
  attributes      Json?           @db.Json
  tenantId        Int?            @map("tenant_id")

  @@unique([name, tenantId])
  @@map("device_profiles")
}

model Credential {
  id          Int            @id @default(autoincrement())
  username    String?        @unique
  password    String?
  token       String?        @unique
  certificate String?
  type        TypeCredential @default(USERPASSWORD)
  device      Device?
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")

  @@map("credentials")
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(50)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  devices   Device[]

  @@map("tags")
}

model VmqAuthAcl {
  id           Int      @id @default(autoincrement())
  mountpoint   String   @default("") @db.VarChar(10)
  username     String   @db.VarChar(128)
  clientId     String   @map("client_id") @db.VarChar(128)
  password     String?  @db.VarChar(128)
  publishAcl   Json     @map("publish_acl")
  subscribeAcl Json     @map("subscribe_acl")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@unique([mountpoint, username, clientId])
  @@map("vmq_auth_acl")
}

model Device {
  id              Int             @id @default(autoincrement())
  name            String          @db.VarChar(50)
  description     String?         @db.VarChar(255)
  serial          String          @unique @db.VarChar(100)
  isPassive       Boolean         @default(false) @map("is_passive")
  isOnline        Boolean         @default(false) @map("is_online")
  isdecoded       Boolean         @default(false) @map("is_decoder")
  credential      Credential?     @relation(fields: [credentialId], references: [id])
  credentialId    Int?            @unique
  configuration   String?         @db.VarChar(250)
  attributes      Attribute[]
  lastTelemetries LastTelemetry[]
  deviceProfile   DeviceProfile?  @relation(fields: [deviceProfileId], references: [id])
  deviceProfileId Int?
  firmware        Firmware?       @relation(fields: [firmwareId], references: [id])
  firmwareId      Int?
  ip              String?         @db.VarChar(50)
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  tags            Tag[]
  VirtualDevice   VirtualDevice?  @relation(fields: [virtualDeviceId], references: [id])
  virtualDeviceId Int?
  alerts          Alert[]
  group           Group?          @relation(fields: [groupId], references: [id])
  groupId         Int?
  tenantId        Int?            @map("tenant_id")
  history         History[]

  @@index([tenantId], name: "tenant_id")
  @@map("devices")
}

model Attribute {
  id        Int      @id @default(autoincrement())
  name      String
  value     String   @db.VarChar(255)
  deviceId  Int      @map("device_id")
  device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([deviceId, name])
  @@map("attributes")
}

model LastTelemetry {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  value     Json     @db.Json
  alias     String?  @db.VarChar(100)
  icon      String?  @db.VarChar(40)
  color     String?  @db.VarChar(30)
  show      Boolean  @default(true)
  deviceId  Int      @map("device_id")
  device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([deviceId, name])
  @@map("last_telemetry")
}

model Report {
  id        Int      @id @default(autoincrement())
  name      String
  tenantId  Int      @map("tenant_id")
  query     String
  type      String
  format    String
  url       String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([tenantId, name])
  @@map("reports")
}

model History {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  value     Json     @db.Json
  device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deviceId  Int

  @@map("history")
}

enum TypeCredential {
  TOKEN
  CERTIFICATE
  USERPASSWORD
}
